// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Data;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(ProjectManagmentDbContext))]
    partial class ProjectManagmentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("AssignmentTag", b =>
                {
                    b.Property<int>("AssignmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssignmentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("AssignmentTag");
                });

            modelBuilder.Entity("AssignmentUser", b =>
                {
                    b.Property<int>("AssignmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssignmentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignmentUser");
                });

            modelBuilder.Entity("ProjectProject", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RelatedProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId", "RelatedProjectId");

                    b.HasIndex("RelatedProjectId");

                    b.ToTable("ProjectProject");
                });

            modelBuilder.Entity("ProjectTag", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProjectTag");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("server.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("CommentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("comment_id");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("answer");
                });

            modelBuilder.Entity("server.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("Assignee")
                        .HasColumnType("INTEGER")
                        .HasColumnName("assignee");

                    b.Property<int?>("Dependent")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dependent");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime")
                        .HasColumnName("end");

                    b.Property<float>("Percentage")
                        .HasColumnType("float")
                        .HasColumnName("percentage");

                    b.Property<int>("PriorityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("priority_id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("project_id");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime")
                        .HasColumnName("start");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("Assignee");

                    b.HasIndex("Dependent");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TypeId");

                    b.ToTable("assignment");
                });

            modelBuilder.Entity("server.Models.AssignmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("AssignmentType");
                });

            modelBuilder.Entity("server.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("assignment_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime")
                        .HasColumnName("time");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("UserId");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("server.Models.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER")
                        .HasColumnName("level");

                    b.HasKey("Id");

                    b.ToTable("priority");
                });

            modelBuilder.Entity("server.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<double>("Budget")
                        .HasColumnType("double")
                        .HasColumnName("budget");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime")
                        .HasColumnName("end");

                    b.Property<DateTime>("EstimatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("estimated_time");

                    b.Property<DateTime>("LastStateChange")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_state_changed");

                    b.Property<double>("Percentage")
                        .HasColumnType("float")
                        .HasColumnName("percentage");

                    b.Property<double>("Spent")
                        .HasColumnType("double")
                        .HasColumnName("spent");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime")
                        .HasColumnName("start");

                    b.Property<int?>("StateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("state");

                    b.Property<int?>("Subproject")
                        .HasColumnType("INTEGER")
                        .HasColumnName("subproject");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("Subproject");

                    b.ToTable("project");
                });

            modelBuilder.Entity("server.Models.ProjectRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("project_role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Project Manager"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Developer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("server.Models.ProjectUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("project_id");

                    b.Property<int>("ProjectRoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("project_role_id");

                    b.Property<int?>("TeamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("team_id");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectRoleId");

                    b.HasIndex("TeamId");

                    b.ToTable("project_users");
                });

            modelBuilder.Entity("server.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Project Manager"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Developer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Guest"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("server.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.ToTable("state");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Not started"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ready"
                        },
                        new
                        {
                            Id = 3,
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Blocked"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Done"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("server.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("category");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("server.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("tags");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("team");
                });

            modelBuilder.Entity("server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("department");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("job_title");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Organisation")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("organisation");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("password");

                    b.Property<int?>("RoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("role_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("AssignmentTag", b =>
                {
                    b.HasOne("server.Models.Assignment", null)
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssignmentUser", b =>
                {
                    b.HasOne("server.Models.Assignment", null)
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectProject", b =>
                {
                    b.HasOne("server.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("RelatedProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectTag", b =>
                {
                    b.HasOne("server.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("server.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Answer", b =>
                {
                    b.HasOne("server.Models.Comment", "Comment")
                        .WithMany("Answers")
                        .HasForeignKey("CommentId");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("server.Models.Assignment", b =>
                {
                    b.HasOne("server.Models.User", "AssigneeNavigation")
                        .WithMany("Assignments")
                        .HasForeignKey("Assignee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Assignment", "DependentNavigation")
                        .WithMany("InverseDependentNavigation")
                        .HasForeignKey("Dependent");

                    b.HasOne("server.Models.Priority", "Priority")
                        .WithMany("Assignments")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Project", "Project")
                        .WithMany("Assignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.AssignmentType", "Type")
                        .WithMany("Assignments")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssigneeNavigation");

                    b.Navigation("DependentNavigation");

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("server.Models.Comment", b =>
                {
                    b.HasOne("server.Models.Assignment", "Assignment")
                        .WithMany("Comments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Project", b =>
                {
                    b.HasOne("server.Models.State", "State")
                        .WithMany("Projects")
                        .HasForeignKey("StateId");

                    b.HasOne("server.Models.Project", "SubprojectNavigation")
                        .WithMany("InverseSubprojectNavigation")
                        .HasForeignKey("Subproject");

                    b.Navigation("State");

                    b.Navigation("SubprojectNavigation");
                });

            modelBuilder.Entity("server.Models.ProjectUser", b =>
                {
                    b.HasOne("server.Models.Project", "Project")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.ProjectRole", "ProjectRole")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("ProjectRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Team", "Team")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("TeamId");

                    b.HasOne("server.Models.User", "User")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ProjectRole");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.User", b =>
                {
                    b.HasOne("server.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("server.Models.Assignment", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("InverseDependentNavigation");
                });

            modelBuilder.Entity("server.Models.AssignmentType", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("server.Models.Comment", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("server.Models.Priority", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("server.Models.Project", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("InverseSubprojectNavigation");

                    b.Navigation("ProjectUsers");
                });

            modelBuilder.Entity("server.Models.ProjectRole", b =>
                {
                    b.Navigation("ProjectUsers");
                });

            modelBuilder.Entity("server.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("server.Models.State", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("server.Models.Team", b =>
                {
                    b.Navigation("ProjectUsers");
                });

            modelBuilder.Entity("server.Models.User", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Comments");

                    b.Navigation("ProjectUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
